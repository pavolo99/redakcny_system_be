CREATE TABLE IF NOT EXISTS SYSTEM_USER
(
    ID            SERIAL      NOT NULL,
    USERNAME      VARCHAR(50) NOT NULL,
    FIRST_NAME    VARCHAR(50),
    LAST_NAME     VARCHAR(50),
    EMAIL         VARCHAR(50),
    AUTH_PROVIDER VARCHAR(50) NOT NULL,
    ROLE          VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS ARTICLE_STATUS
(
    ID    SERIAL      NOT NULL,
    STATE VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS ARTICLE
(
    ID                   SERIAL         NOT NULL,
    NAME                 VARCHAR(50)    NOT NULL,
    TEXT                 VARCHAR(10000) NOT NULL,
    KEY_WORDS            VARCHAR(100),
    ABSTRACT             VARCHAR(200),
    PUBLIC_FILE_NAME     VARCHAR(50),
    PUBLICATION_DECISION VARCHAR(50),
    REVIEW_NUMBER        INT            NOT NULL,
    ARTICLE_STATUS_ID    INT            NOT NULL,
    CREATED_AT           TIMESTAMP      NOT NULL,
    UPDATED_AT           TIMESTAMP      NOT NULL,
    CREATED_BY_ID        INT            NOT NULL,
    UPDATED_BY_ID        INT            NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ARTICLE_STATUS_ID) REFERENCES ARTICLE_STATUS (ID),
    FOREIGN KEY (CREATED_BY_ID) REFERENCES SYSTEM_USER (ID),
    FOREIGN KEY (UPDATED_BY_ID) REFERENCES SYSTEM_USER (ID)
);

CREATE TABLE IF NOT EXISTS IMAGE
(
    ID            SERIAL       NOT NULL,
    NAME          VARCHAR(200) NOT NULL,
    IMAGE_CONTENT BYTEA        NOT NULL,
    ARTICLE_ID    INT          NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLE (ID)
);

CREATE TABLE IF NOT EXISTS COMMENT
(
    ID             SERIAL       NOT NULL,
    IS_RESOLVED    BOOLEAN      NOT NULL,
    TEXT           VARCHAR(200) NOT NULL,
    UPDATED_AT     TIMESTAMP    NOT NULL,
    RANGE_FROM     INT          NOT NULL,
    RANGE_TO       INT          NOT NULL,
    COMMENTED_TEXT VARCHAR(10000),
    ARTICLE_ID     INT          NOT NULL,
    CREATED_BY_ID  INT          NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLE (ID),
    FOREIGN KEY (CREATED_BY_ID) REFERENCES SYSTEM_USER (ID)
);

CREATE TABLE IF NOT EXISTS COMMENT_REPLY
(
    ID            SERIAL       NOT NULL,
    TEXT          VARCHAR(200) NOT NULL,
    UPDATED_AT    TIMESTAMP    NOT NULL,
    COMMENT_ID    INT          NOT NULL,
    CREATED_BY_ID INT          NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (COMMENT_ID) REFERENCES COMMENT (ID),
    FOREIGN KEY (CREATED_BY_ID) REFERENCES SYSTEM_USER (ID)
);

CREATE TABLE VERSION
(
    ID         INT            NOT NULL,
    TEXT       VARCHAR(10000) NOT NULL,
    ORDER_BY   INT            NOT NULL,
    ARTICLE_ID INT            NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLE (ID)
);

CREATE TABLE ARTICLE_COLLABORATOR
(
    ID         INT     NOT NULL,
    IS_OWNER   BOOLEAN NOT NULL DEFAULT false,
    CAN_EDIT   BOOLEAN NOT NULL DEFAULT false,
    IS_AUTHOR  BOOLEAN NOT NULL DEFAULT false,
    ARTICLE_ID INT     NOT NULL,
    USER_ID    INT     NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLE (ID),
    FOREIGN KEY (USER_ID) REFERENCES SYSTEM_USER (ID),
    UNIQUE (ARTICLE_ID, USER_ID)
);

-- init ARTICLE_STATUS data

INSERT INTO public.ARTICLE_STATUS(STATE)
VALUES ('WRITING');
INSERT INTO public.ARTICLE_STATUS(STATE)
VALUES ('IN_REVIEW');
INSERT INTO public.ARTICLE_STATUS(STATE)
VALUES ('APPROVED');
INSERT INTO public.ARTICLE_STATUS(STATE)
VALUES ('ARCHIVED');
